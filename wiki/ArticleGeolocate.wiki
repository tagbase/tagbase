#summary Running a geolocation analysis and re-importing the results in Tagbase

<wiki:toc max_depth="2" />

= [http://code.google.com/p/geolocation/wiki/ArticleQuickStart Installation of R and geolocation packages]=

You can find out how to install the geolocation packages here: http://code.google.com/p/geolocation/wiki/ArticleQuickStart

= What you need is to... =

  * Make sure you have the *StarterKit* files.
  
  * Inform yourself with an overview of the geolocation methods:

		http://www.soest.hawaii.edu/PFRP/nov07mtg/nielsen.pdf
		
  * Refer to *[http://docs.google.com/leaf?id=0BwcYza_M2AiqZmVjNDBhYzgtMzBlZi00OTQ1LWE3NDAtNzRiYjhmYmJiOTEw&hl=en PFRP Trackit Workshop materials]* for more detailed tutorials
  

= Conducting a sample run of Trackit=

  * Tagbase *[ArticleExport exports]* comma-separated files (e.g. `Tag2light.csv` and `Tag2sst.csv`) that are formatted for use with Trackit.
  
  * A text-file script (`script.R`) with commands for R is also generated by Tagbase. You can locate your copy here:
  
  `C:\Tagbase\tagfiles\simulated\export\script.R`
  
  * Right-click to *Open with* a Notepad or any text file editor to see the code
  
  {{{
# Note: delete the hash sign (#) to uncomment a line

# Preparation; define working directory
setwd("C:/Tagbase/tagfiles/simulated/export")
# Save data to
savefile <- "C:/Tagbase/tagfiles/simulated/outputs/simtracks.Rdata"

# Main code:
library(trackit)
track <- read.csv('Tag2light.csv')
# sst <- read.csv('Tag2sst.csv') # Using only light
pt <- prepit(track, fix.first=c(202.203,32.87,2008,6,16,0,0,0),
		    fix.last=c(201.34,33.81,2008,7,4,0,0,0), scan=F)
tag2 <- trackit(pt, D.ph=2, D.i=400)

track <- read.csv('Tag3light.csv')
# sst <- read.csv('Tag3sst.csv') # Using only light
pt <- prepit(track, fix.first=c(202.52,32.68,2002,6,29,0,0,0),
		    fix.last=c(201.154,34.34,2002,10,25,0,0,0), scan=F)
tag3 <- trackit(pt, ss3.ph=4)

save(tag2,tag3,file=savefile) 
  }}}
  
  * Start up R, copy-and-paste lines or block of code to run the commands
  
http://tagbase.googlecode.com/svn/trunk/images/R1.jpg
  
= Exporting results from R Trackit for Tagbase=

Assume we have run our tracks successfully, and everything is saved up in a R native format file (`simtracks.Rdata`), we can load everything up again and output the tracks for re-importing back to Tagbase.

   * Locate your copy of R script (`exportTagbase.R`) that does everything for you here:
   
   `C:\Tagbase\tagfiles\simulated\outputs\exportTagbase.R`
   
   * Right-click to *Open with* a Notepad or any text file editor to see the code
   
   {{{
# Note: delete the hash sign (#) to uncomment a line

# Preparation; define working directory:
setwd("C:/Tagbase/tagfiles/simulated/outputs")

# Main code:

source("fit2csv.R")
load("simtracks.Rdata")
fit2csv(tag2)
fit2csv(tag3)
   }}}   

   * Start up R, copy-and-paste lines or block of code to run the commands
   * A set of output files (e.g `tag2a.csv`, `tag2b.csv`, `tag2c.csv`) will be generated for each tag
   The output files are:
   * `-a.csv` - track points
   * `-b.csv` - model parameters
   * `-c.csv` - initialization values to model

= Setting up an analysis import file for Tagbase = 

   * Browse to the `<templates>` folder and double-click on `TagBaseImportAnalysis.xlt. You can use this to prepare your own file
   
   `C:\Tagbase\templates\TagBaseImportAnalysis.xlt`
   
   * We will use an example analysis import file that we have already built. Locate it here:
   
   `C:\Tagbase\tagfiles\simulated\outputs\TagBaseImportAnalysis1.xls`
   
   * This `TagBaseImportAnalysis1.xls` file needs to be in the same folder as the output files (e.g `tag2a.csv`, `tag2b.csv`, `tag2c.csv`) for Tagbase to import properly. Alternatively, you can specific the exact file path to each file (i.e. with drive letter and everything).
   
   * Open the file in Excel to inspect the records. The fields (columns) are as follows:

http://tagbase.googlecode.com/svn/trunk/images/TrackMacro0.jpg   
   
		* `AnalysisID` - a unique numerical identifier for a particular analysis. The numbering/ naming convention depends on your own organization. Our example shows all tags belong to the same analysis, `AnalysisID` = 1. Tagbase will ingest any integers you assign here as `AnalysisID`
		
		* `TagID` - make sure you match up your track data files with the corresponding `TagID` specified in the `TagInfo` table
		
		* `InputsID` - this numerical identifier allows you to specify whether a same set of input parameters is used to run a particular analysis. If you are unsure what you have used as inputs, just assign a different `InputsID` (in the ascending order) for each tag.
		
		* `ImportFile` - filename of the output file. Use separate records for multiple output files belonging to a tag. 
		
		* `AnalysisType` - specify the type of analysis you are imported the results for. Tagbase recognizes a keyword specified here, e.g. *geolocation* as a flag for a track that can be used in other parts of Tagbase's operations.
		
		* `AnalysisMethod` - specify the method used. For geolocation, *trackit*, *ukfsst* or *kftrack* can provide useful descriptions here
		
		* `LastModified` - specify a date stamp of when you conduct your analysis
		
		* `Notes` - add notes where necessary

= Importing in Tagbase = 		
		
	* Start Tagbase, go to *Macros* 
	
	http://tagbase.googlecode.com/svn/trunk/images/TrackMacro1a.jpg  
	
	http://tagbase.googlecode.com/svn/trunk/images/TrackMacro1.jpg
	
	* Double-click on *`AddTrackingData`*
	
	* Browse to the analysis import file:
	
	`C:\Tagbase\tagfiles\simulated\outputs\TagBaseImportAnalysis1.xls`
	
	* Click *Open* to import, wait until it finishes and the hourglass disappears
	
	
	